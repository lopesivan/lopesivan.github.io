I" <h2 id="abstract">Abstract</h2>

<p>A reconstru√ß√£o 3D √© um problema antigo e mal colocado, que tem
sido explorado h√° d√©cadas pela vis√£o computacional, computa√ß√£o
gr√°fica e comunidades de aprendizado de m√°quina. Desde 2015, a
reconstru√ß√£o 3D com base em imagem usando sistemas neurais
convolucionaisredes (CNN) atraiu um interesse crescente e
demonstrou um desempenho impressionante. Dada esta nova era de
r√°pida evolu√ß√£o, este artigo fornece uma pesquisa abrangente dos
desenvolvimentos recentes nesse campo. Focando nos trabalhos que
usam aprendizado profundo e t√©cnicas para estimar a forma 3D de
objetos gen√©ricos a partir de uma √∫nica ou v√°rias imagens RGB.</p>

<p>Organizamos a literatura com base nas representa√ß√µes de forma,
nas arquiteturas de rede e nos mecanismos de treinamento que que
s√£o usados. Embora esta pesquisa se destine a m√©todos que
reconstroem objetos gen√©ricos, tamb√©m √© revisado alguns dos
trabalhos recentes que se concentram em classes de objetos
espec√≠ficas, como formas e rostos humanos. √â fornecido uma
an√°lise e compara√ß√£o do desempenho de alguns documentos
principais, resumindo-se alguns dos problemas em aberto nesse
campo e propondo dire√ß√µes promissoras para pesquisas futuras.</p>

<h2 id="introdu√ß√£o">INTRODU√á√ÉO</h2>

<p>O objetivo da reconstru√ß√£o 3D baseada em imagem √© inferir a
geometria e estrutura de objetos e cenas partindo de um ou
v√°rias imagens 2D. Este problema de longa data que √© mal
posicionado √© fundamental para muitas aplica√ß√µes, como navega√ß√£o
por rob√¥, reconhecimento de objetos e compreens√£o de cenas,
modelagem 3D e anima√ß√£o, controle industrial e diagn√≥stico
m√©dico.</p>

<p>A recupera√ß√£o da dimens√£o perdida a partir de apenas imagens 2D
foi o objetivo do est√©reo multivista cl√°ssico e do formato
M√©todos X, que foram extensivamente investigados por muitas
d√©cadas.  A primeira gera√ß√£o de m√©todos abordava o problema da
perspectiva geom√©trica; eles focaram na compreens√£o e
formaliza√ß√£o, matematicamente, do 3D ao processo de proje√ß√£o 2D,
com o objetivo de elaborar solu√ß√µes t√©cnicas ou algor√≠tmicas
para obten√ß√£o do mecanismo inverso.</p>

<h2 id="a-evolu√ß√£o-dos-m√©todos-de-reconstru√ß√£o-3d">A evolu√ß√£o dos m√©todos de reconstru√ß√£o 3D</h2>

<p>Solu√ß√µes eficazes geralmente exigem v√°rias imagens, capturadas a
partir de c√¢meras calibradas com precis√£o. Baseando-se em
t√©cnicas de est√©reo, por exemplo, exigem como recursos
correspondentes imagens capturadas de √¢ngulos de vis√£o
ligeiramente diferentes e que se use o princ√≠pio da triangula√ß√£o
para recuperar a coordena√ß√£o 3D diante dos pixels da imagem.</p>

<p>Formam-se a partir da silhueta ou forma pelo espa√ßo escultural,
m√©todos que requerem segmenta√ß√£o precisa das silhuetas 2D. Esses
m√©todos, que levaram a raz√µes reconstru√ß√µes 3D de qualidade
aceit√°vel, exigem v√°rias imagens de o mesmo objeto capturado por
c√¢meras bem calibradas. Este,no entanto, pode n√£o ser pr√°tico ou
vi√°vel em muitas situa√ß√µes devido ao alto custo computacional.</p>

<p>Curiosamente, os seres humanos s√£o bons em resolver esses
problemas problemas inversos, aproveitando-se  de algum conhecimento
pr√©vio. Eles podem inferir o tamanho aproximado e a geometria
aproximada dos objetos usando apenas um olho. Eles podem at√©
adivinhar o que seria partindo de outro ponto de vista. N√≥s
podemos fazer isso porque todos os objetos e cenas vistos
anteriormente nos permitiram construir conhecimento pr√©vio e
desenvolver modelos mentais de como s√£o os objetos.</p>

<p>A segunda gera√ß√£o de m√©todos de constru√ß√£o 3D tentou
usar esse conhecimento pr√©vio e reformular formular o problema de
reconstru√ß√£o 3D com reconhecimento problema. O caminho das
t√©cnicas de aprendizado profundo s√£o muito mais importantes, pois
a crescente disponibilidade de grandes dados de treinamento em
conjunto, levar a uma nova gera√ß√£o de m√©todos capazes de
recuperar a geometria 3D e a estrutura dos objetos de um ou
m√∫ltiplas imagens RGB sem a complexidade da c√¢mera e processo de
separa√ß√£o e filtragem. Apesar de recentes, esses m√©todos t√™m demonstrado
resultados emocionantes e promissores em v√°rias tarefas
relacionadas √† vis√£o computacional e processamento de imagem.</p>

<figure>
   <a href="https://github.com/lopesivan/impa-2019-11-21/raw/master/1906.06543.pdf">
   <img src="imgs/pdf.png" style="max-width: 100px;" alt="Paper" />
   </a>
   <figcaption>Image-based 3D Object Reconstruction: State-of-the-Art and Trends in the Deep Learning Era.</figcaption>
</figure>

<figure>
   <a href="https://github.com/lopesivan/impa-2019-11-21/raw/master/slide.pdf">
   <img src="imgs/pdf.png" style="max-width: 100px;" alt="Slide" />
   </a>
   <figcaption>Apresenta√ß√£o</figcaption>
</figure>

<div>
   Artigo usado na apresenta√ß√£o: <a href="docs/1906.06543.pdf">Image-based 3D Object Reconstruction: State-of-the-Art and Trends in the Deep Learning Era.</a>
</div>

<div>
   Slide baseado no artigo proposto: <a href="docs/slide.pdf">Reconstru√ß√£o de objetos 3D baseados em imagem.</a>
</div>

<hr />

<p>Ivan Jekyll also offers powerful support for code snippets:</p>

<p>Ivan Jekyll also offers powerful support for code snippets:</p>

<p>O c√≥digo fonte da implementa√ß√£o estat√≠stica do problema das escadas
<a href="https://raw.githubusercontent.com/lopesivan/impa-2019-11-21/master/code/classify_stairs_nnet_from_scratch.R">classifica escadas em tons de cinza</a>
conforme mostrado no <a href="https://github.com/lopesivan/impa-2019-11-21/raw/master/slide.pdf">slide</a> da apresenta√ß√£o.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1">#=============================================================================</span><span class="w">
</span><span class="c1"># settings</span><span class="w">

</span><span class="n">options</span><span class="p">(</span><span class="n">scipen</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">20</span><span class="p">)</span><span class="w">

</span><span class="c1">#--------------------------------------------------</span><span class="w">
</span><span class="c1"># packages</span><span class="w">

</span><span class="n">library</span><span class="p">(</span><span class="n">data.table</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">stringr</span><span class="p">)</span><span class="w">

</span><span class="c1">#=============================================================================</span><span class="w">
</span><span class="c1"># Helper methods</span><span class="w">

</span><span class="n">sigmoid</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">){</span><span class="w">
  </span><span class="c1"># sigmoid function</span><span class="w">

  </span><span class="m">1</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="p">))</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">softmax</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">offset_trick</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">){</span><span class="w">
  </span><span class="c1"># softmax</span><span class="w">

  </span><span class="k">if</span><span class="p">(</span><span class="n">offset_trick</span><span class="p">){</span><span class="w">
    </span><span class="n">rowmaxs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="p">)</span><span class="w">
    </span><span class="n">result</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="n">m</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">rowmaxs</span><span class="p">)</span><span class="o">/</span><span class="n">rowSums</span><span class="p">(</span><span class="nf">exp</span><span class="p">(</span><span class="n">m</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">rowmaxs</span><span class="p">))</span><span class="w">
  </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="p">{</span><span class="w">
    </span><span class="n">result</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="o">/</span><span class="n">rowSums</span><span class="p">(</span><span class="nf">exp</span><span class="p">(</span><span class="n">m</span><span class="p">))</span><span class="w">
  </span><span class="p">}</span><span class="w">

  </span><span class="nf">return</span><span class="p">(</span><span class="n">result</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="c1">#=============================================================================</span><span class="w">
</span><span class="c1"># Datasets</span><span class="w">

</span><span class="c1"># Read train &amp; test data</span><span class="w">
</span><span class="n">train</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">fread</span><span class="p">(</span><span class="s2">"./Data/train.csv"</span><span class="p">)</span><span class="w">
</span><span class="n">test</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">fread</span><span class="p">(</span><span class="s2">"./Data/test.csv"</span><span class="p">)</span><span class="w">

</span><span class="c1"># Insert Label for plots</span><span class="w">
</span><span class="n">train</span><span class="p">[,</span><span class="w"> </span><span class="n">Label</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">ifelse</span><span class="p">(</span><span class="n">IsStairs</span><span class="p">,</span><span class="w"> </span><span class="s2">"Stairs"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Not Stairs"</span><span class="p">)]</span><span class="w">
</span><span class="n">train</span><span class="p">[,</span><span class="w"> </span><span class="n">Label</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="n">Label</span><span class="p">,</span><span class="w"> </span><span class="n">levels</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"Not Stairs"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Stairs"</span><span class="p">))]</span><span class="w">
</span><span class="n">test</span><span class="p">[,</span><span class="w"> </span><span class="n">Label</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">ifelse</span><span class="p">(</span><span class="n">IsStairs</span><span class="p">,</span><span class="w"> </span><span class="s2">"Stairs"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Not Stairs"</span><span class="p">)]</span><span class="w">
</span><span class="n">test</span><span class="p">[,</span><span class="w"> </span><span class="n">Label</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="n">Label</span><span class="p">,</span><span class="w"> </span><span class="n">levels</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"Not Stairs"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Stairs"</span><span class="p">))]</span><span class="w">

</span><span class="c1"># Reshape from wide to tall</span><span class="w">
</span><span class="n">trainTall</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">melt</span><span class="p">(</span><span class="w">
  </span><span class="n">train</span><span class="p">,</span><span class="w">
  </span><span class="n">id.vars</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"ImageId"</span><span class="p">,</span><span class="w"> </span><span class="s2">"IsStairs"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Label"</span><span class="p">),</span><span class="w">
  </span><span class="n">measure.vars</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"R1C1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"R1C2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"R2C1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"R2C2"</span><span class="p">),</span><span class="w">
  </span><span class="n">value.name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Intensity"</span><span class="p">,</span><span class="w">
  </span><span class="n">variable.name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Pixel"</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="n">testTall</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">melt</span><span class="p">(</span><span class="w">
  </span><span class="n">test</span><span class="p">,</span><span class="w">
  </span><span class="n">id.vars</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"ImageId"</span><span class="p">,</span><span class="w"> </span><span class="s2">"IsStairs"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Label"</span><span class="p">),</span><span class="w">
  </span><span class="n">measure.vars</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"R1C1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"R1C2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"R2C1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"R2C2"</span><span class="p">),</span><span class="w">
  </span><span class="n">value.name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Intensity"</span><span class="p">,</span><span class="w">
  </span><span class="n">variable.name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Pixel"</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="n">trainTall</span><span class="p">[,</span><span class="w"> </span><span class="n">`:=`</span><span class="p">(</span><span class="n">Row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">as.integer</span><span class="p">(</span><span class="n">str_extract</span><span class="p">(</span><span class="n">Pixel</span><span class="p">,</span><span class="w"> </span><span class="s2">"(?&lt;=R)\\d"</span><span class="p">)),</span><span class="w"> </span><span class="n">Col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">as.integer</span><span class="p">(</span><span class="n">str_extract</span><span class="p">(</span><span class="n">Pixel</span><span class="p">,</span><span class="w"> </span><span class="s2">"(?&lt;=C)\\d"</span><span class="p">)))]</span><span class="w">
</span><span class="n">testTall</span><span class="p">[,</span><span class="w"> </span><span class="n">`:=`</span><span class="p">(</span><span class="n">Row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">as.integer</span><span class="p">(</span><span class="n">str_extract</span><span class="p">(</span><span class="n">Pixel</span><span class="p">,</span><span class="w"> </span><span class="s2">"(?&lt;=R)\\d"</span><span class="p">)),</span><span class="w"> </span><span class="n">Col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">as.integer</span><span class="p">(</span><span class="n">str_extract</span><span class="p">(</span><span class="n">Pixel</span><span class="p">,</span><span class="w"> </span><span class="s2">"(?&lt;=C)\\d"</span><span class="p">)))]</span><span class="w">

</span><span class="c1">#=============================================================================</span><span class="w">
</span><span class="c1"># Figures</span><span class="w">

</span><span class="c1">#--------------------------------------------------</span><span class="w">
</span><span class="c1"># fig1: stairs vs not stairs</span><span class="w">

</span><span class="n">fig1data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">trainTall</span><span class="p">[</span><span class="n">ImageId</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">train</span><span class="o">$</span><span class="n">ImageId</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">12</span><span class="p">]]</span><span class="w">
</span><span class="n">fig1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">fig1data</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Col</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="o">-</span><span class="n">Row</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Intensity</span><span class="p">))</span><span class="o">+</span><span class="n">geom_tile</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s2">"white"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_fill_gradient</span><span class="p">(</span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">,</span><span class="w"> </span><span class="n">limits</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">255</span><span class="p">),</span><span class="w"> </span><span class="n">guide</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_void</span><span class="p">()</span><span class="o">+</span><span class="n">labs</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">facet_wrap</span><span class="p">(</span><span class="o">~</span><span class="n">ImageId</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">labeller</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">labeller</span><span class="p">(</span><span class="n">ImageId</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">setNames</span><span class="p">(</span><span class="nf">as.character</span><span class="p">(</span><span class="n">fig1data</span><span class="o">$</span><span class="n">Label</span><span class="p">),</span><span class="w"> </span><span class="n">fig1data</span><span class="o">$</span><span class="n">ImageId</span><span class="p">)))</span><span class="w">

</span><span class="c1">#--------------------------------------------------</span><span class="w">
</span><span class="c1"># fig2: image with pixels labeled x1, x2, x3, x4</span><span class="w">

</span><span class="n">image1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">trainTall</span><span class="p">[</span><span class="n">ImageId</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">1</span><span class="p">]</span><span class="w">
</span><span class="n">image1</span><span class="p">[</span><span class="n">Row</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">Col</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">PixelLabel</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"x1 = "</span><span class="p">,</span><span class="w"> </span><span class="n">Intensity</span><span class="p">)]</span><span class="w">
</span><span class="n">image1</span><span class="p">[</span><span class="n">Row</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">Col</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">PixelLabel</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"x2 = "</span><span class="p">,</span><span class="w"> </span><span class="n">Intensity</span><span class="p">)]</span><span class="w">
</span><span class="n">image1</span><span class="p">[</span><span class="n">Row</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">2</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">Col</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">PixelLabel</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"x3 = "</span><span class="p">,</span><span class="w"> </span><span class="n">Intensity</span><span class="p">)]</span><span class="w">
</span><span class="n">image1</span><span class="p">[</span><span class="n">Row</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">2</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">Col</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">PixelLabel</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"x4 = "</span><span class="p">,</span><span class="w"> </span><span class="n">Intensity</span><span class="p">)]</span><span class="w">

</span><span class="n">fig2lables</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">image1</span><span class="w">
</span><span class="n">fig2lables</span><span class="p">[,</span><span class="w"> </span><span class="n">`:=`</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Col</span><span class="m">+0.45</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.55</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">Row</span><span class="p">)]</span><span class="w">

</span><span class="n">fig2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">image1</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Col</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="o">-</span><span class="n">Row</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Intensity</span><span class="p">))</span><span class="o">+</span><span class="n">geom_tile</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s2">"white"</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">geom_text</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fig2lables</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PixelLabel</span><span class="p">),</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"goldenrod3"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="n">hjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">vjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">scale_fill_gradient</span><span class="p">(</span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">,</span><span class="w"> </span><span class="n">limits</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">255</span><span class="p">),</span><span class="w"> </span><span class="n">guide</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">theme_void</span><span class="p">()</span><span class="o">+</span><span class="n">labs</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">image1</span><span class="o">$</span><span class="n">Label</span><span class="p">[</span><span class="m">1</span><span class="p">])</span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">plot.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">hjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.5</span><span class="p">,</span><span class="w"> </span><span class="n">vjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">-50</span><span class="p">))</span><span class="w">

</span><span class="c1">#=============================================================================</span><span class="w">
</span><span class="c1"># NNet from scratch</span><span class="w">

</span><span class="c1"># Build a nnet with and input layer, hidden layer, and output layer</span><span class="w">
</span><span class="c1"># input layer: 1st node = 1 (for bias), nodes 2-4 correspond to features R1C1, R1C2, R2C1, R2C2</span><span class="w">
</span><span class="c1"># hidden layer: 3 nodes. 1st node = 1 (for bias), nodes 2-3 correspond to incoming signals</span><span class="w">
</span><span class="c1"># output layer: 2 nodes</span><span class="w">
</span><span class="c1"># Optimize categorical cross entropy error</span><span class="w">
</span><span class="c1"># Apply sigmoid activation to the hidden layer, softmax to the output layer</span><span class="w">

</span><span class="c1">#--------------------------------------------------</span><span class="w">
</span><span class="c1"># Set Y, X1, stepsize</span><span class="w">

</span><span class="n">Y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">Stairs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">train</span><span class="o">$</span><span class="n">IsStairs</span><span class="p">,</span><span class="w"> </span><span class="n">NotStairs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">!</span><span class="n">train</span><span class="o">$</span><span class="n">IsStairs</span><span class="p">)</span><span class="w">
</span><span class="n">X1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.matrix</span><span class="p">(</span><span class="n">train</span><span class="p">[,</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">R1C1</span><span class="p">,</span><span class="w"> </span><span class="n">R1C2</span><span class="p">,</span><span class="w"> </span><span class="n">R2C1</span><span class="p">,</span><span class="w"> </span><span class="n">R2C2</span><span class="p">)])</span><span class="w">

</span><span class="c1"># Prepend X1 with column of 1s for bias terms</span><span class="w">
</span><span class="n">X1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">X1</span><span class="p">)</span><span class="w">  </span><span class="c1"># Include column of all 1s</span><span class="w">

</span><span class="c1"># Set setpsize</span><span class="w">
</span><span class="n">stepsize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.1</span><span class="w">

</span><span class="c1">#--------------------------------------------------</span><span class="w">
</span><span class="c1"># Weight initialization</span><span class="w">

</span><span class="n">set.seed</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="n">W1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="n">runif</span><span class="p">(</span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">-0.01</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.01</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="o">*</span><span class="m">2</span><span class="p">),</span><span class="w"> </span><span class="n">nrow</span><span class="o">=</span><span class="m">5</span><span class="p">)</span><span class="w">
</span><span class="n">W2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="n">runif</span><span class="p">(</span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">-0.01</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.01</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="o">*</span><span class="m">2</span><span class="p">),</span><span class="w"> </span><span class="n">nrow</span><span class="o">=</span><span class="m">3</span><span class="p">)</span><span class="w">

</span><span class="c1">#--------------------------------------------------</span><span class="w">
</span><span class="c1"># Forward Pass (first iteration)</span><span class="w">

</span><span class="n">Z1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">X1</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">W1</span><span class="w">
</span><span class="n">X2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">sigmoid</span><span class="p">(</span><span class="n">Z1</span><span class="p">))</span><span class="w">
</span><span class="n">Z2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">X2</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">W2</span><span class="w">
</span><span class="n">Yhat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">softmax</span><span class="p">(</span><span class="n">Z2</span><span class="p">)</span><span class="w">

</span><span class="c1"># Calculate Categorical Cross Entropy Error</span><span class="w">
</span><span class="n">loss</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="o">-</span><span class="n">rowSums</span><span class="p">(</span><span class="n">Y</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">Yhat</span><span class="p">)))</span><span class="w">

</span><span class="c1"># Measure loss and classification accuracy</span><span class="w">
</span><span class="n">predicted_class</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">Yhat</span><span class="p">,</span><span class="w"> </span><span class="n">MARGIN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">FUN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">which.max</span><span class="p">)</span><span class="w">
</span><span class="n">true_class</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="n">MARGIN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">FUN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">which.max</span><span class="p">)</span><span class="w">
</span><span class="n">accuracy</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">predicted_class</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">true_class</span><span class="p">)</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">paste</span><span class="p">(</span><span class="s2">"Loss:"</span><span class="p">,</span><span class="w"> </span><span class="n">loss</span><span class="p">,</span><span class="w"> </span><span class="s2">"| accuracy:"</span><span class="p">,</span><span class="w"> </span><span class="n">accuracy</span><span class="p">))</span><span class="w">

</span><span class="c1">#--------------------------------------------------</span><span class="w">
</span><span class="c1"># Backprop (first iteration)</span><span class="w">

</span><span class="c1"># Backprop</span><span class="w">
</span><span class="n">delta1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">Yhat</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">Y</span><span class="w">  </span><span class="c1"># Partial CE/Partial Z2</span><span class="w">
</span><span class="n">delta2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">delta1</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">t</span><span class="p">(</span><span class="n">W2</span><span class="p">)</span><span class="w">  </span><span class="c1"># Partial CE/Partial X2</span><span class="w">
</span><span class="n">delta3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">delta2</span><span class="p">[,</span><span class="w"> </span><span class="m">-1</span><span class="p">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">X2</span><span class="p">[,</span><span class="w"> </span><span class="m">-1</span><span class="p">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">X2</span><span class="p">[,</span><span class="w"> </span><span class="m">-1</span><span class="p">]))</span><span class="w">  </span><span class="c1"># Partial CE/Partial Z1</span><span class="w">

</span><span class="c1"># Gradients</span><span class="w">
</span><span class="n">gradW2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">t</span><span class="p">(</span><span class="n">X2</span><span class="p">)</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">delta1</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">nrow</span><span class="p">(</span><span class="n">X1</span><span class="p">)</span><span class="w">
</span><span class="n">gradW1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">t</span><span class="p">(</span><span class="n">X1</span><span class="p">)</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">delta3</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">nrow</span><span class="p">(</span><span class="n">X1</span><span class="p">)</span><span class="w">

</span><span class="c1"># Weight updates</span><span class="w">
</span><span class="n">W1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">W1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">gradW1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">stepsize</span><span class="w">
</span><span class="n">W2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">W2</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">gradW2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">stepsize</span><span class="w">

</span><span class="c1"># Measure loss and classification accuracy</span><span class="w">
</span><span class="n">predicted_class</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">Yhat</span><span class="p">,</span><span class="w"> </span><span class="n">MARGIN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">FUN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">which.max</span><span class="p">)</span><span class="w">
</span><span class="n">true_class</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="n">MARGIN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">FUN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">which.max</span><span class="p">)</span><span class="w">
</span><span class="n">accuracy</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">predicted_class</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">true_class</span><span class="p">)</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">paste</span><span class="p">(</span><span class="s2">"Loss:"</span><span class="p">,</span><span class="w"> </span><span class="n">loss</span><span class="p">,</span><span class="w"> </span><span class="s2">"| accuracy on training data:"</span><span class="p">,</span><span class="w"> </span><span class="n">accuracy</span><span class="p">))</span><span class="w">

</span><span class="c1">#--------------------------------------------------</span><span class="w">
</span><span class="c1"># Repeat</span><span class="w">

</span><span class="n">epochs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1500</span><span class="w">
</span><span class="k">for</span><span class="p">(</span><span class="n">epoch</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">2</span><span class="o">:</span><span class="n">epochs</span><span class="p">){</span><span class="w">

  </span><span class="c1"># Forward Pass</span><span class="w">
  </span><span class="n">Z1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">X1</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">W1</span><span class="w">
  </span><span class="n">X2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">sigmoid</span><span class="p">(</span><span class="n">Z1</span><span class="p">))</span><span class="w">
  </span><span class="n">Z2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">X2</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">W2</span><span class="w">
  </span><span class="n">Yhat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">softmax</span><span class="p">(</span><span class="n">Z2</span><span class="p">)</span><span class="w">

  </span><span class="c1"># Calculate Categorical Cross Entropy Error</span><span class="w">
  </span><span class="n">loss</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="o">-</span><span class="n">rowSums</span><span class="p">(</span><span class="n">Y</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">Yhat</span><span class="p">)))</span><span class="w">

  </span><span class="c1"># Backprop</span><span class="w">
  </span><span class="n">delta1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">Yhat</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">Y</span><span class="w">  </span><span class="c1"># Partial CE/Partial Z2</span><span class="w">
  </span><span class="n">delta2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">delta1</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">t</span><span class="p">(</span><span class="n">W2</span><span class="p">[</span><span class="m">-1</span><span class="p">,</span><span class="w"> </span><span class="p">])</span><span class="w">  </span><span class="c1"># Partial CE/Partial X2[, -1]</span><span class="w">
  </span><span class="n">delta3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">delta2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">X2</span><span class="p">[,</span><span class="w"> </span><span class="m">-1</span><span class="p">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">X2</span><span class="p">[,</span><span class="w"> </span><span class="m">-1</span><span class="p">]))</span><span class="w">  </span><span class="c1"># Partial CE/Partial Z1</span><span class="w">

  </span><span class="c1"># Gradients</span><span class="w">
  </span><span class="n">gradW2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">t</span><span class="p">(</span><span class="n">X2</span><span class="p">)</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">delta1</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="m">400</span><span class="w">
  </span><span class="n">gradW1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">t</span><span class="p">(</span><span class="n">X1</span><span class="p">)</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">delta3</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="m">400</span><span class="w">

  </span><span class="c1"># Weight updates</span><span class="w">
  </span><span class="n">W1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">W1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">gradW1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">stepsize</span><span class="w">
  </span><span class="n">W2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">W2</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">gradW2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">stepsize</span><span class="w">

  </span><span class="c1"># Print the loss and accuracy</span><span class="w">
  </span><span class="k">if</span><span class="p">((</span><span class="n">epoch</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w"> </span><span class="o">%%</span><span class="w"> </span><span class="m">100</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">0</span><span class="p">){</span><span class="w">
    </span><span class="n">predicted_class</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">Yhat</span><span class="p">,</span><span class="w"> </span><span class="n">MARGIN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">FUN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">which.max</span><span class="p">)</span><span class="w">
    </span><span class="n">true_class</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="n">MARGIN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">FUN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">which.max</span><span class="p">)</span><span class="w">
    </span><span class="n">accuracy</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">predicted_class</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">true_class</span><span class="p">)</span><span class="w">

    </span><span class="n">print</span><span class="p">(</span><span class="n">paste</span><span class="p">(</span><span class="s2">"Epoch:"</span><span class="p">,</span><span class="w"> </span><span class="n">epoch</span><span class="p">,</span><span class="w"> </span><span class="s2">"Loss:"</span><span class="p">,</span><span class="w"> </span><span class="n">loss</span><span class="p">,</span><span class="w"> </span><span class="s2">"| accuracy on training data:"</span><span class="p">,</span><span class="w"> </span><span class="n">accuracy</span><span class="p">))</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="c1">#--------------------------------------------------</span><span class="w">
</span><span class="c1"># Make predictions on the test data</span><span class="w">

</span><span class="n">Y_test</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">Stairs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">test</span><span class="o">$</span><span class="n">IsStairs</span><span class="p">,</span><span class="w"> </span><span class="n">NotStairs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">!</span><span class="n">test</span><span class="o">$</span><span class="n">IsStairs</span><span class="p">)</span><span class="w">
</span><span class="n">X1_test</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.matrix</span><span class="p">(</span><span class="n">test</span><span class="p">[,</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">R1C1</span><span class="p">,</span><span class="w"> </span><span class="n">R1C2</span><span class="p">,</span><span class="w"> </span><span class="n">R2C1</span><span class="p">,</span><span class="w"> </span><span class="n">R2C2</span><span class="p">)])</span><span class="w">

</span><span class="c1"># Prepend X1 with column of 1s for bias terms</span><span class="w">
</span><span class="n">X1_test</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">X1_test</span><span class="p">)</span><span class="w">  </span><span class="c1"># Include column of all 1s</span><span class="w">

</span><span class="c1"># Forward pass</span><span class="w">
</span><span class="n">Z1_test</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">X1_test</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">W1</span><span class="w">
</span><span class="n">X2_test</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">sigmoid</span><span class="p">(</span><span class="n">Z1_test</span><span class="p">))</span><span class="w">
</span><span class="n">Z2_test</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">X2_test</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">W2</span><span class="w">
</span><span class="n">Yhat_test</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">softmax</span><span class="p">(</span><span class="n">Z2_test</span><span class="p">)</span><span class="w">

</span><span class="c1"># Check results</span><span class="w">
</span><span class="n">predicted_class</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">Yhat_test</span><span class="p">,</span><span class="w"> </span><span class="n">MARGIN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">FUN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">which.max</span><span class="p">)</span><span class="w">
</span><span class="n">true_class</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">Y_test</span><span class="p">,</span><span class="w"> </span><span class="n">MARGIN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">FUN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">which.max</span><span class="p">)</span><span class="w">
</span><span class="n">accuracy</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">predicted_class</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">true_class</span><span class="p">)</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">paste</span><span class="p">(</span><span class="s2">"accuracy on test data:"</span><span class="p">,</span><span class="w"> </span><span class="n">accuracy</span><span class="p">))</span><span class="w">  </span><span class="c1"># 0.87</span><span class="w">

</span><span class="c1">##################################################################################################################################</span><span class="w">
</span><span class="c1"># Check results using keras</span><span class="w">

</span><span class="n">library</span><span class="p">(</span><span class="n">keras</span><span class="p">)</span><span class="w">

</span><span class="n">Y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">Stairs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">train</span><span class="o">$</span><span class="n">IsStairs</span><span class="p">,</span><span class="w"> </span><span class="n">NotStairs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">!</span><span class="n">train</span><span class="o">$</span><span class="n">IsStairs</span><span class="p">)</span><span class="w">
</span><span class="n">X1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.matrix</span><span class="p">(</span><span class="n">train</span><span class="p">[,</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">R1C1</span><span class="p">,</span><span class="w"> </span><span class="n">R1C2</span><span class="p">,</span><span class="w"> </span><span class="n">R2C1</span><span class="p">,</span><span class="w"> </span><span class="n">R2C2</span><span class="p">)])</span><span class="w">

</span><span class="n">set.seed</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="n">W1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="n">runif</span><span class="p">(</span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">-0.01</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.01</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="o">*</span><span class="m">2</span><span class="p">),</span><span class="w"> </span><span class="n">nrow</span><span class="o">=</span><span class="m">5</span><span class="p">)</span><span class="w">
</span><span class="n">W2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="n">runif</span><span class="p">(</span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">-0.01</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.01</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="o">*</span><span class="m">2</span><span class="p">),</span><span class="w"> </span><span class="n">nrow</span><span class="o">=</span><span class="m">3</span><span class="p">)</span><span class="w">

</span><span class="n">model</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">keras_model_sequential</span><span class="p">()</span><span class="w">
</span><span class="n">model</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">layer_dense</span><span class="p">(</span><span class="w">
  </span><span class="n">object</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">model</span><span class="p">,</span><span class="w">
  </span><span class="n">input_shape</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4L</span><span class="p">,</span><span class="w">
  </span><span class="n">use_bias</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w">
  </span><span class="n">units</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w">
  </span><span class="n">activation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'sigmoid'</span><span class="p">,</span><span class="w">
  </span><span class="n">weights</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">W1</span><span class="p">[</span><span class="m">2</span><span class="o">:</span><span class="m">5</span><span class="p">,],</span><span class="w"> </span><span class="n">array</span><span class="p">(</span><span class="n">W1</span><span class="p">[</span><span class="m">1</span><span class="p">,]))</span><span class="w">
</span><span class="p">)</span><span class="w">
</span><span class="n">model</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">layer_dense</span><span class="p">(</span><span class="w">
  </span><span class="n">object</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">model</span><span class="p">,</span><span class="w">
  </span><span class="n">input_shape</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w">
  </span><span class="n">use_bias</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w">
  </span><span class="n">units</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2L</span><span class="p">,</span><span class="w">
  </span><span class="n">activation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'softmax'</span><span class="p">,</span><span class="w">
  </span><span class="n">weights</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">W2</span><span class="p">[</span><span class="m">2</span><span class="o">:</span><span class="m">3</span><span class="p">,],</span><span class="w"> </span><span class="n">as.array</span><span class="p">(</span><span class="n">W2</span><span class="p">[</span><span class="m">1</span><span class="p">,]))</span><span class="w">
</span><span class="p">)</span><span class="w">
</span><span class="n">model</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">compile</span><span class="p">(</span><span class="w">
  </span><span class="n">object</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">model</span><span class="p">,</span><span class="w">
  </span><span class="n">loss</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'categorical_crossentropy'</span><span class="p">,</span><span class="w">
  </span><span class="n">optimizer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">optimizer_sgd</span><span class="p">(</span><span class="n">lr</span><span class="o">=</span><span class="m">0.1</span><span class="p">),</span><span class="w">
  </span><span class="n">metrics</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'accuracy'</span><span class="p">)</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="c1"># Check the weights</span><span class="w">
</span><span class="n">get_weights</span><span class="p">(</span><span class="n">model</span><span class="p">)</span><span class="w">

</span><span class="c1"># [[1]]</span><span class="w">
</span><span class="c1"># [,1]         [,2]</span><span class="w">
</span><span class="c1"># [1,] -0.002557522  0.008893506</span><span class="w">
</span><span class="c1"># [2,]  0.001457067  0.003215956</span><span class="w">
</span><span class="c1"># [3,]  0.008164156  0.002582281</span><span class="w">
</span><span class="c1"># [4,] -0.005966362 -0.008764274</span><span class="w">
</span><span class="c1">#</span><span class="w">
</span><span class="c1"># [[2]]</span><span class="w">
</span><span class="c1"># [1] -0.004689827  0.007967793</span><span class="w">
</span><span class="c1">#</span><span class="w">
</span><span class="c1"># [[3]]</span><span class="w">
</span><span class="c1"># [,1]           [,2]</span><span class="w">
</span><span class="c1"># [1,] -0.006468865  0.00539682852</span><span class="w">
</span><span class="c1"># [2,]  0.003740457 -0.00004601516</span><span class="w">
</span><span class="c1">#</span><span class="w">
</span><span class="c1"># [[4]]</span><span class="w">
</span><span class="c1"># [1] -0.005880509 -0.002317926</span><span class="w">

</span><span class="c1"># Check the first few predictions from the initial nnet before training</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">predict_on_batch</span><span class="p">(</span><span class="n">object</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">model</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">X1</span><span class="p">))</span><span class="w">
</span><span class="c1">#           [,1]      [,2]</span><span class="w">
</span><span class="c1"># [1,] 0.4986581 0.5013419</span><span class="w">
</span><span class="c1"># [2,] 0.4982750 0.5017250</span><span class="w">
</span><span class="c1"># [3,] 0.4974762 0.5025238</span><span class="w">
</span><span class="c1"># [4,] 0.4982801 0.5017199</span><span class="w">
</span><span class="c1"># [5,] 0.4977485 0.5022514</span><span class="w">
</span><span class="c1"># [6,] 0.4986086 0.5013914</span><span class="w">

</span><span class="c1"># Evaluate initial model (our model has loss = 0.6934985)</span><span class="w">
</span><span class="n">evaluate</span><span class="p">(</span><span class="n">object</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">model</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">X1</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="n">batch_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">400</span><span class="p">)</span><span class="w">  </span><span class="c1"># 0.6934986</span><span class="w">

</span><span class="c1"># Run one iteration of gradient descent</span><span class="w">
</span><span class="n">train_on_batch</span><span class="p">(</span><span class="n">object</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">model</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">X1</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Y</span><span class="p">)</span><span class="w">

</span><span class="c1"># Check the weights again</span><span class="w">
</span><span class="n">get_weights</span><span class="p">(</span><span class="n">model</span><span class="p">)</span><span class="w">

</span><span class="c1"># [[1]]</span><span class="w">
</span><span class="c1">#              [,1]          [,2]</span><span class="w">
</span><span class="c1"># [1,] -0.002025512  0.0087154731</span><span class="w">
</span><span class="c1"># [2,]  0.002760389  0.0032557009</span><span class="w">
</span><span class="c1"># [3,]  0.003623125  0.0003690708</span><span class="w">
</span><span class="c1"># [4,] -0.010618099 -0.0107602663</span><span class="w">
</span><span class="c1">#</span><span class="w">
</span><span class="c1"># [[2]]</span><span class="w">
</span><span class="c1"># [1] -0.004693955  0.007963512</span><span class="w">
</span><span class="c1">#</span><span class="w">
</span><span class="c1"># [[3]]</span><span class="w">
</span><span class="c1">#                [,1]        [,2]</span><span class="w">
</span><span class="c1"># [1,] -0.00490462780 0.003832591</span><span class="w">
</span><span class="c1"># [2,]  0.00003715511 0.003657288</span><span class="w">
</span><span class="c1">#</span><span class="w">
</span><span class="c1"># [[4]]</span><span class="w">
</span><span class="c1"># [1] -0.004931618 -0.003266816</span></code></pre></figure>

<p>Check out the <a href="https://github.com/lopesivan/impa-2019-11-21/raw/master/slide.pdf">Slide</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll‚Äôs GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>

<!--
vim: set ts=4 sw=4 tw=64 ft=markdown:
-->
:ET